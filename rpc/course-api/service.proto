syntax = "proto3";

package kampus.courseapi;
option go_package = "/rpc/course-api";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

service CourseAPI {
  rpc GetCourse(GetCourseRequest) returns (Course);
  rpc CreateCourse(CreateCourseRequest) returns (Course);
  rpc UpdateCourse(UpdateCourseRequest) returns (google.protobuf.Empty);
  rpc DeleteCourse(DeleteCourseRequest) returns (google.protobuf.Empty);
  rpc CreateLesson(CreateLessonRequest) returns (Lesson);
  rpc GetLesson(GetLessonRequest) returns (Lesson);
  rpc UpdateLesson(UpdateLessonRequest) returns (google.protobuf.Empty);
  rpc DeleteLesson(DeleteLessonRequest) returns (google.protobuf.Empty);
}

// Course Start
message GetCourseRequest {
  string ID = 1;
}

message CreateCourseRequest {
  string user_id = 1;
  string name = 2;
  string description = 3;
  repeated string category_ids = 4;
}

message UpdateCourseRequest {
  string ID = 1;
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue description = 3;
}

message DeleteCourseRequest {
  string ID = 1;
}

message Course {
  string ID = 1;
  string user_id = 2;
  string name = 3;
  string description = 4;
  string slug = 5;
  repeated string category_ids = 6;
}
// Course End

// Lesson Start

message GetLessonRequest {
  string ID = 1;
}

message CreateLessonRequest {
  string user_id = 1;
  string name = 2;
  string description = 3;
  string course_id = 4;
  string video_id = 5;
}

message DeleteLessonRequest {
  string ID = 1;
}

message UpdateLessonRequest {
  string ID = 1;
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue description = 3;
}

message Lesson {
  string ID = 1;
  string user_id = 2;
  string course_id = 3;
  string video_id = 4;
  string name = 5;
  string description = 6;
  string slug = 7;
  repeated string category_ids = 8;
}

// Lesson End

/*   export type CreateCourseInput = { */
/*   id?: string | null, */
/*   name: string, */
/*   description?: string | null, */
/*   downloadUrl?: string | null, */
/*   publishedAt?: string | null, */
/*   owner?: string | null, */
/*   categoryID: string, */
/*   slug: string, */
/* }; */
/*  */
/* # This "input" configures a global authorization rule to enable public access to */
/* # all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules */
/* input AMPLIFY { */
/*   globalAuthRule: AuthRule = { allow: public } */
/* } # FOR TESTING ONLY! */
/* type Lesson */
/*   @model */
/*   @auth( */
/*     rules: [ */
/*       { */
/*         allow: owner */
/*         ownerField: "owner" */
/*         operations: [read, create, update, delete] */
/*       } */
/*       { allow: public, operations: [read] } */
/*       { allow: private, operations: [read] } */
/*       { allow: private, provider: iam, operations: [create] } */
/*     ] */
/*   ) { */
/*  */
/*  */
/*  */
/*  */
/*   id: ID! */
/*   name: String */
/*   videoUrl: String */
/*   transcript: String # @custom */
/*   publishedAt: String */
/*  */
/*   courseID: ID @index(name: "byCourse", sortKeyFields: ["id"]) */
/*   course: Course @belongsTo(fields: ["courseID"]) */
/*  */
/*   categoryID: ID @index(name: "byCategory", sortKeyFields: ["id"]) */
/*   category: Category @belongsTo(fields: ["categoryID"]) */
/*  */
/*   slug: String! */
/*     @index(name: "bySlug", sortKeyFields: ["id"], queryField: "lessonBySlug") */
/*  */
/*  */
/*  */
/*  */
/* } */
/*  */
/* type Course */
/*   @model */
/*   @auth( */
/*     rules: [ */
/*       { */
/*         allow: owner */
/*         ownerField: "owner" */
/*         operations: [read, create, update, delete] */
/*       } */
/*       { allow: public, operations: [read] } */
/*       { allow: private, operations: [read] } */
/*       { allow: private, provider: iam, operations: [create] } */
/*     ] */
/*   ) { */
/*   id: ID! */
/*   name: String! */
/*   description: String */
/*   downloadUrl: String # @custom */
/*   publishedAt: String */
/*  */
/*   owner: String */
/*  */
/*   lessons: [Lesson] @hasMany(indexName: "byCourse", fields: ["id"]) */
/*  */
/*   categoryID: ID! @index(name: "byCategory", sortKeyFields: ["id"]) */
/*   category: Category @belongsTo(fields: ["categoryID"]) */
/*  */
/*   slug: String! */
/*     @index(name: "bySlug", sortKeyFields: ["id"], queryField: "courseBySlug") */
/* } */
/*  */
/* type Category */
/*   @model */
/*   @auth( */
/*     rules: [ */
/*       { */
/*         allow: owner */
/*         ownerField: "owner" */
/*         operations: [read, create, update, delete] */
/*       } */
/*       { allow: public, operations: [read] } */
/*       { allow: private, operations: [read] } */
/*       { allow: private, provider: iam, operations: [create] } */
/*     ] */
/*   ) { */
/*   id: ID! */
/*   name: String! */
/*   description: String */
/*  */
/*   courses: [Course] @hasMany(indexName: "byCategory", fields: ["id"]) */
/*   lessons: [Lesson] @hasMany(indexName: "byCategory", fields: ["id"]) */
/*  */
/*   slug: String! */
/*     @index(name: "bySlug", sortKeyFields: ["id"], queryField: "categoryBySlug") */
/* } */
/*  */
